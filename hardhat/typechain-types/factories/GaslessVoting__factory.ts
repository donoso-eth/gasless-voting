/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { GaslessVoting, GaslessVotingInterface } from "../GaslessVoting";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_gasslessProposing",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
    ],
    name: "_createProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "positive",
        type: "bool",
      },
      {
        internalType: "address",
        name: "voter",
        type: "address",
      },
    ],
    name: "_votingProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getProposalState",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "positive",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "negative",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "proposalTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "currentProposalId",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "payload",
            type: "bytes",
          },
        ],
        internalType: "struct ProposalState",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "proposalState",
    outputs: [
      {
        internalType: "uint256",
        name: "positive",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "negative",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "proposalTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentProposalId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "positive",
        type: "bool",
      },
    ],
    name: "votingProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60c06040526201518060005534801561001757600080fd5b50604051610cd4380380610cd483398101604081905261003691610077565b73abcc9b596420a9e9172fd5938620e265a0f9df926080523360a052600280546001600160a01b0319166001600160a01b03929092169190911790556100a7565b60006020828403121561008957600080fd5b81516001600160a01b03811681146100a057600080fd5b9392505050565b60805160a051610bfa6100da60003960006103730152600081816101460152818161043201526107a50152610bfa6000f3fe6080604052600436106100745760003560e01c8063572b6c051161004e578063572b6c05146101295780638a52e73214610176578063aade375b14610196578063d26331d4146101b857600080fd5b806319b756d1146100bf5780633ccfd60b146100df578063441a21eb1461010957600080fd5b366100ba576100b86040518060400160405280600e81526020017f2d2d2d2d2d20726563656976653a000000000000000000000000000000000000815250346101e9565b005b600080fd5b3480156100cb57600080fd5b506100b86100da366004610811565b610260565b3480156100eb57600080fd5b506100f4610366565b60405190151581526020015b60405180910390f35b34801561011557600080fd5b506100b8610124366004610844565b610430565b34801561013557600080fd5b506100f4610144366004610866565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b34801561018257600080fd5b506100b8610191366004610897565b6104e4565b3480156101a257600080fd5b506101ab6105b1565b6040516101009190610998565b3480156101c457600080fd5b506101d86101d33660046109e3565b6106c2565b6040516101009594939291906109fc565b61025c82826040516024016101ff929190610a32565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb60e72cc00000000000000000000000000000000000000000000000000000000179052610780565b5050565b60015460009081526004602090815260408083206001600160a01b038516845290915290205460ff16156102db5760405162461bcd60e51b815260206004820152600d60248201527f414c52454144595f564f5445440000000000000000000000000000000000000060448201526064015b60405180910390fd5b81156103085760015460009081526003602052604081208054916102fe83610a54565b919050555061032f565b60018054600090815260036020526040812090910180549161032983610a54565b91905055505b6001805460009081526004602090815260408083206001600160a01b03909516835293905291909120805460ff1916909117905550565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103e05760405162461bcd60e51b815260206004820152600a60248201527f4f4e4c595f4f574e45520000000000000000000000000000000000000000000060448201526064016102d2565b604051600090339047908381818185875af1925050503d8060008114610422576040519150601f19603f3d011682016040523d82523d6000602084013e610427565b606091505b50909250505090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146104ce5760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792063616c6c61626c65206279205472757374656420466f727761726460448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084016102d2565b60006104d86107a1565b905061025c8282610260565b6002546001600160a01b0316331461053e5760405162461bcd60e51b815260206004820152600e60248201527f4f4e4c595f50524f504f53494e4700000000000000000000000000000000000060448201526064016102d2565b60018281556040805160a081018252600080825260208083018281524284860190815260608501898152608086018981528a8652600394859052969094208551815591519682019690965594516002860155905190840155905190919060048201906105aa9082610b04565b5050505050565b6105e36040518060a0016040528060008152602001600081526020016000815260200160008152602001606081525090565b6003600060015481526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201805461063b90610a7b565b80601f016020809104026020016040519081016040528092919081815260200182805461066790610a7b565b80156106b45780601f10610689576101008083540402835291602001916106b4565b820191906000526020600020905b81548152906001019060200180831161069757829003601f168201915b505050505081525050905090565b60036020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040180546106fd90610a7b565b80601f016020809104026020016040519081016040528092919081815260200182805461072990610a7b565b80156107765780601f1061074b57610100808354040283529160200191610776565b820191906000526020600020905b81548152906001019060200180831161075957829003601f168201915b5050505050905085565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633036107e0575060131936013560601c90565b503390565b803580151581146107f557600080fd5b919050565b80356001600160a01b03811681146107f557600080fd5b6000806040838503121561082457600080fd5b61082d836107e5565b915061083b602084016107fa565b90509250929050565b60006020828403121561085657600080fd5b61085f826107e5565b9392505050565b60006020828403121561087857600080fd5b61085f826107fa565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156108aa57600080fd5b82359150602083013567ffffffffffffffff808211156108c957600080fd5b818501915085601f8301126108dd57600080fd5b8135818111156108ef576108ef610881565b604051601f8201601f19908116603f0116810190838211818310171561091757610917610881565b8160405282815288602084870101111561093057600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000815180845260005b818110156109785760208185018101518683018201520161095c565b506000602082860101526020601f19601f83011685010191505092915050565b60208152815160208201526020820151604082015260408201516060820152606082015160808201526000608083015160a0808401526109db60c0840182610952565b949350505050565b6000602082840312156109f557600080fd5b5035919050565b85815284602082015283604082015282606082015260a060808201526000610a2760a0830184610952565b979650505050505050565b604081526000610a456040830185610952565b90508260208301529392505050565b600060018201610a7457634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c90821680610a8f57607f821691505b602082108103610aaf57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610aff57600081815260208120601f850160051c81016020861015610adc5750805b601f850160051c820191505b81811015610afb57828155600101610ae8565b5050505b505050565b815167ffffffffffffffff811115610b1e57610b1e610881565b610b3281610b2c8454610a7b565b84610ab5565b602080601f831160018114610b675760008415610b4f5750858301515b600019600386901b1c1916600185901b178555610afb565b600085815260208120601f198616915b82811015610b9657888601518255948401946001909101908401610b77565b5085821015610bb45787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220257b21d5b575633a12011a31ea362c31862dfe6d06ca597ad73d7702cca32c6b64736f6c63430008110033";

type GaslessVotingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GaslessVotingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GaslessVoting__factory extends ContractFactory {
  constructor(...args: GaslessVotingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _gasslessProposing: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GaslessVoting> {
    return super.deploy(
      _gasslessProposing,
      overrides || {}
    ) as Promise<GaslessVoting>;
  }
  getDeployTransaction(
    _gasslessProposing: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_gasslessProposing, overrides || {});
  }
  attach(address: string): GaslessVoting {
    return super.attach(address) as GaslessVoting;
  }
  connect(signer: Signer): GaslessVoting__factory {
    return super.connect(signer) as GaslessVoting__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GaslessVotingInterface {
    return new utils.Interface(_abi) as GaslessVotingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GaslessVoting {
    return new Contract(address, _abi, signerOrProvider) as GaslessVoting;
  }
}
