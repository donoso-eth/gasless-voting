/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GaslessProposing,
  GaslessProposingInterface,
} from "../GaslessProposing";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IOps",
        name: "_ops",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "taskId",
        type: "bytes32",
      },
    ],
    name: "ProposalCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "ProposalFinished",
    type: "event",
  },
  {
    inputs: [],
    name: "ETH",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
    ],
    name: "createProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "finishVoting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "finishingVotingTask",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gelato",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getProposalBytes",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getProposalTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getStatus",
    outputs: [
      {
        components: [
          {
            internalType: "enum ProposalStatus",
            name: "proposalStatus",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "taskId",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "proposalId",
            type: "uint256",
          },
        ],
        internalType: "struct Proposal",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ops",
    outputs: [
      {
        internalType: "contract IOps",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_gaslessVoting",
        type: "address",
      },
    ],
    name: "setVotingContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60a06040526107086001556000600255600060065534801561002057600080fd5b50604051620016c4380380620016c48339810160408190526100419161010a565b600880546001600160a01b0319166001600160a01b038316908117909155336080526003805460ff191690556040805163573ea57560e01b8152905163573ea575916004808201926020929091908290030181865afa1580156100a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100cc919061010a565b600980546001600160a01b0319166001600160a01b03929092169190911790555061012e565b6001600160a01b038116811461010757600080fd5b50565b60006020828403121561011c57600080fd5b8151610127816100f2565b9392505050565b608051611573620001516000396000818161038c01526104b601526115736000f3fe6080604052600436106100c05760003560e01c8063573ea57511610074578063e70abe921161004e578063e70abe9214610236578063f0867a8414610256578063f90943031461027657600080fd5b8063573ea575146101b65780638322fff2146101ee578063a069c1ac1461021657600080fd5b80633ccfd60b116100a55780633ccfd60b1461015a5780634e69d5601461017f57806350928198146101a157600080fd5b806304ba7f381461010b5780630ea4cc791461013657600080fd5b36610106576101046040518060400160405280600e81526020017f2d2d2d2d2d20726563656976653a0000000000000000000000000000000000008152503461028b565b005b600080fd5b34801561011757600080fd5b506101206102ed565b60405161012d919061109f565b60405180910390f35b34801561014257600080fd5b5061014c600a5481565b60405190815260200161012d565b34801561016657600080fd5b5061016f61037f565b604051901515815260200161012d565b34801561018b57600080fd5b5061019461043b565b60405161012d91906110cf565b3480156101ad57600080fd5b5060065461014c565b3480156101c257600080fd5b506009546101d6906001600160a01b031681565b6040516001600160a01b03909116815260200161012d565b3480156101fa57600080fd5b506101d673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b34801561022257600080fd5b5061010461023136600461111c565b6104ab565b34801561024257600080fd5b506008546101d6906001600160a01b031681565b34801561026257600080fd5b50610104610271366004611139565b61054a565b34801561028257600080fd5b5061010461071e565b6102e982826040516024016102a19291906111ab565b60408051601f198184030181529190526020810180516001600160e01b03167fb60e72cc000000000000000000000000000000000000000000000000000000001790526108b6565b5050565b6060600780546102fc906111cd565b80601f0160208091040260200160405190810160405280929190818152602001828054610328906111cd565b80156103755780601f1061034a57610100808354040283529160200191610375565b820191906000526020600020905b81548152906001019060200180831161035857829003601f168201915b5050505050905090565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103eb5760405162461bcd60e51b815260206004820152600a60248201526927a7262cafa7aba722a960b11b60448201526064015b60405180910390fd5b604051600090339047908381818185875af1925050503d806000811461042d576040519150601f19603f3d011682016040523d82523d6000602084013e610432565b606091505b50909250505090565b6040805160608101825260008082526020820181905291810191909152604080516060810190915260038054829060ff16600181111561047d5761047d6110b9565b600181111561048e5761048e6110b9565b815260200160018201548152602001600282015481525050905090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105105760405162461bcd60e51b815260206004820152600a60248201526927a7262cafa7aba722a960b11b60448201526064016103e2565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b73abcc9b596420a9e9172fd5938620e265a0f9df9233146105ad5760405162461bcd60e51b815260206004820152600f60248201527f6f6e6c7947656c61746f52656c6179000000000000000000000000000000000060448201526064016103e2565b600060035460ff1660018111156105c6576105c66110b9565b146106135760405162461bcd60e51b815260206004820152601960248201527f4f4c445f50524f504f53414c5f5354494c4c5f4143544956450000000000000060448201526064016103e2565b61061b6108d7565b6002805490600061062b8361121d565b90915550506003805460ff1916600117905560025460055542600655600761065482848361129a565b506000546002546040517f8a52e7320000000000000000000000000000000000000000000000000000000081526001600160a01b0390921691638a52e732916106a3918690869060040161135b565b600060405180830381600087803b1580156106bd57600080fd5b505af11580156106d1573d6000803e3d6000fd5b505050506106dd610904565b600a81905560048190556040519081527f288a29bca04edb18fcdb2c76d6e3b03b8a137c85c70d1a4cb8aacfa868d605109060200160405180910390a15050565b6008546001600160a01b031633146107785760405162461bcd60e51b815260206004820152601160248201527f4f707352656164793a206f6e6c794f707300000000000000000000000000000060448201526064016103e2565b600854604080517fb810c636000000000000000000000000000000000000000000000000000000008152815160009384936001600160a01b039091169263b810c63692600480830193928290030181865afa1580156107db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ff9190611391565b9150915061080d8282610b48565b6003805460ff1916905560008054604080517f0e44e63600000000000000000000000000000000000000000000000000000000815290516001600160a01b0390921692630e44e6369260048084019382900301818387803b15801561087157600080fd5b505af1158015610885573d6000803e3d6000fd5b50506040517f7d68951a093d0d47ea1026427c3c618cad4da5928083068e23e387369011c320925060009150a15050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b61090236604719013560601c36601f19013536603319013560601c6001600160a01b03169190610bf0565b565b6000806001544261091591906113c1565b600154604080516fffffffffffffffffffffffffffffffff909316602084015282015260600160408051808303601f19018152600483526024830182526020830180517ff9094303000000000000000000000000000000000000000000000000000000006001600160e01b0390911617905281516002808252606082019093529093506000918160200160208202803683370190505090506001816000815181106109c2576109c26113da565b602002602001019060048111156109db576109db6110b9565b908160048111156109ee576109ee6110b9565b81525050600381600181518110610a0757610a076113da565b60200260200101906004811115610a2057610a206110b9565b90816004811115610a3357610a336110b9565b905250604080516001808252818301909252600091816020015b6060815260200190600190039081610a4d5790505090508381600081518110610a7857610a786113da565b60209081029190910181019190915260408051808201825284815291820183905260085490517f3323b4670000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690633323b46790610afb9030908890869073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee906004016113f0565b6020604051808303816000875af1158015610b1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3e91906114e6565b9550505050505090565b6009546040516000916001600160a01b03169084908381818185875af1925050503d8060008114610b95576040519150601f19603f3d011682016040523d82523d6000602084013e610b9a565b606091505b5050905080610beb5760405162461bcd60e51b815260206004820152601e60248201527f5f7472616e736665723a20455448207472616e73666572206661696c6564000060448201526064016103e2565b505050565b80600003610bfd57505050565b6001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610c3557610beb6001600160a01b0384168383610c3f565b610beb8282610caa565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b03167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610beb908490610dc3565b80471015610cfa5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016103e2565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610d47576040519150601f19603f3d011682016040523d82523d6000602084013e610d4c565b606091505b5050905080610beb5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016103e2565b6000610e18826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610ea89092919063ffffffff16565b805190915015610beb5780806020019051810190610e3691906114ff565b610beb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016103e2565b6060610eb78484600085610ebf565b949350505050565b606082471015610f375760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016103e2565b600080866001600160a01b03168587604051610f539190611521565b60006040518083038185875af1925050503d8060008114610f90576040519150601f19603f3d011682016040523d82523d6000602084013e610f95565b606091505b5091509150610fa687838387610fb1565b979650505050505050565b60608315611020578251600003611019576001600160a01b0385163b6110195760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103e2565b5081610eb7565b610eb783838151156110355781518083602001fd5b8060405162461bcd60e51b81526004016103e2919061109f565b60005b8381101561106a578181015183820152602001611052565b50506000910152565b6000815180845261108b81602086016020860161104f565b601f01601f19169290920160200192915050565b6020815260006110b26020830184611073565b9392505050565b634e487b7160e01b600052602160045260246000fd5b81516060820190600281106110e6576110e66110b9565b80835250602083015160208301526040830151604083015292915050565b6001600160a01b038116811461111957600080fd5b50565b60006020828403121561112e57600080fd5b81356110b281611104565b6000806020838503121561114c57600080fd5b823567ffffffffffffffff8082111561116457600080fd5b818501915085601f83011261117857600080fd5b81358181111561118757600080fd5b86602082850101111561119957600080fd5b60209290920196919550909350505050565b6040815260006111be6040830185611073565b90508260208301529392505050565b600181811c908216806111e157607f821691505b60208210810361120157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60006001820161122f5761122f611207565b5060010190565b634e487b7160e01b600052604160045260246000fd5b601f821115610beb57600081815260208120601f850160051c810160208610156112735750805b601f850160051c820191505b818110156112925782815560010161127f565b505050505050565b67ffffffffffffffff8311156112b2576112b2611236565b6112c6836112c083546111cd565b8361124c565b6000601f8411600181146112fa57600085156112e25750838201355b600019600387901b1c1916600186901b178355611354565b600083815260209020601f19861690835b8281101561132b578685013582556020948501946001909201910161130b565b50868210156113485760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b600080604083850312156113a457600080fd5b8251915060208301516113b681611104565b809150509250929050565b808201808211156113d4576113d4611207565b92915050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0385168152600060206080818401526114136080840187611073565b8381036040808601919091528651818352805191830182905283019060009060608401905b8083101561146857835160058110611452576114526110b9565b8252928501926001929092019190850190611438565b508885015184820394860194909452835180825281860194860193509150600582901b8101850160005b838110156114c057601f198383030186526114ae828651611073565b95870195948701949150600101611492565b506001600160a01b038916606089015295506114dd945050505050565b95945050505050565b6000602082840312156114f857600080fd5b5051919050565b60006020828403121561151157600080fd5b815180151581146110b257600080fd5b6000825161153381846020870161104f565b919091019291505056fea264697066735822122071a14393891c6d9961a57c777e1bcb70db0f881e1a64c3bc257c2a4024f925bd64736f6c63430008110033";

type GaslessProposingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GaslessProposingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GaslessProposing__factory extends ContractFactory {
  constructor(...args: GaslessProposingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _ops: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GaslessProposing> {
    return super.deploy(_ops, overrides || {}) as Promise<GaslessProposing>;
  }
  getDeployTransaction(
    _ops: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_ops, overrides || {});
  }
  attach(address: string): GaslessProposing {
    return super.attach(address) as GaslessProposing;
  }
  connect(signer: Signer): GaslessProposing__factory {
    return super.connect(signer) as GaslessProposing__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GaslessProposingInterface {
    return new utils.Interface(_abi) as GaslessProposingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GaslessProposing {
    return new Contract(address, _abi, signerOrProvider) as GaslessProposing;
  }
}
